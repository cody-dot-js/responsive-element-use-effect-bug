{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","titleRef","React","useRef","useState","uncontrolledTitleFocusedProperly","setUncontrolledTitleFocusedProperly","controlledTitleFocusedProperly","setControlledTitleFocusedProperly","useControlled","setUseControlled","breakpoint","setBreakpoint","useEffect","title","current","focus","console","warn","large","tabIndex","ref","text","tiny","onChange","useCallback","value","locale","htmlFor","id","type","checked","e","target","toString","responsiveTo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0aAkGeA,MA5Ff,WACE,IAAMC,EAAWC,IAAMC,OAAO,MADjB,EAKTD,IAAME,UAAS,GALN,mBAGXC,EAHW,KAIXC,EAJW,OASTJ,IAAME,UAAS,GATN,mBAOXG,EAPW,KAQXC,EARW,OAU6BN,IAAME,UAAS,GAV5C,mBAUNK,EAVM,KAUSC,EAVT,OAWuBR,IAAME,SAAS,IAXtC,mBAWNO,EAXM,KAWMC,EAXN,KAabV,IAAMW,WAAU,WAAO,IACJC,EAAUb,EAAnBc,QAEJD,GACFA,EAAME,QACFP,EACFD,GAAkC,GAElCF,GAAoC,KAGtCW,QAAQC,KAAK,kCACTT,EACFD,GAAkC,GAElCF,GAAoC,MAGvC,CAACG,IAEJ,IAAMU,EACJ,6BACE,0BAAMC,SAAS,IAAIC,IAAKpB,GAAxB,oBAGA,iDACA,kBAAC,IAAD,CAAQqB,KAAK,sBAIXC,EACJ,6BACE,0BAAMH,SAAS,IAAIC,IAAKpB,GAAxB,mBAGA,gDACA,kBAAC,IAAD,CAAQqB,KAAK,sBAIXE,EAAWtB,IAAMuB,aAAY,SAAAC,GAAK,OAAId,EAAcc,KAAQ,IAElE,OACE,kBAAC,IAAD,CAAMC,OAAO,MACX,2BAAOC,QAAQ,2BAAf,sCAGA,2BACEC,GAAG,0BACHC,KAAK,WACLC,QAAStB,EACTe,SAAU,SAAAQ,GAAC,OAAItB,EAAiBsB,EAAEC,OAAOF,YAE1CtB,EACC,6BACE,qDAC0B,IACvBJ,EAAiC6B,YAEpC,kBAAC,IAAD,CAAmBC,aAAa,SAASZ,KAAMA,EAAMJ,MAAOA,KAG9D,6BACE,sDAC2BZ,EAA+B2B,YAE1D,0CAAgBvB,GAChB,kBAAC,IAAD,CACEa,SAAUA,EACVW,aAAa,SACbZ,KAAMA,EACNJ,MAAOA,OC9ECiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dc3bc485.chunk.js","sourcesContent":["import React from \"react\";\nimport Base from \"terra-base\";\nimport ResponsiveElement from \"terra-responsive-element\";\nimport Button from \"terra-button\";\nimport \"./App.css\";\n\nfunction App() {\n  const titleRef = React.useRef(null);\n  const [\n    uncontrolledTitleFocusedProperly,\n    setUncontrolledTitleFocusedProperly\n  ] = React.useState(false);\n  const [\n    controlledTitleFocusedProperly,\n    setControlledTitleFocusedProperly\n  ] = React.useState(false);\n  const [useControlled, setUseControlled] = React.useState(false);\n  const [breakpoint, setBreakpoint] = React.useState(\"\");\n\n  React.useEffect(() => {\n    const { current: title } = titleRef;\n\n    if (title) {\n      title.focus();\n      if (useControlled) {\n        setControlledTitleFocusedProperly(true);\n      } else {\n        setUncontrolledTitleFocusedProperly(true);\n      }\n    } else {\n      console.warn(\"Couldn't focus on the title...\");\n      if (useControlled) {\n        setControlledTitleFocusedProperly(false);\n      } else {\n        setUncontrolledTitleFocusedProperly(false);\n      }\n    }\n  }, [useControlled]);\n\n  const large = (\n    <div>\n      <span tabIndex=\"0\" ref={titleRef}>\n        Large Title Here\n      </span>\n      <p>Large Content Here</p>\n      <Button text=\"Focusable Button\" />\n    </div>\n  );\n\n  const tiny = (\n    <div>\n      <span tabIndex=\"0\" ref={titleRef}>\n        Tiny Title Here\n      </span>\n      <p>Tiny Content Here</p>\n      <Button text=\"Focusable Button\" />\n    </div>\n  );\n\n  const onChange = React.useCallback(value => setBreakpoint(value), []);\n\n  return (\n    <Base locale=\"en\">\n      <label htmlFor=\"use-controlled-checkbox\">\n        Use Controlled Responsive Element?\n      </label>\n      <input\n        id=\"use-controlled-checkbox\"\n        type=\"checkbox\"\n        checked={useControlled}\n        onChange={e => setUseControlled(e.target.checked)}\n      />\n      {useControlled ? (\n        <div>\n          <p>\n            Title focused properly?{\" \"}\n            {uncontrolledTitleFocusedProperly.toString()}\n          </p>\n          <ResponsiveElement responsiveTo=\"window\" tiny={tiny} large={large} />\n        </div>\n      ) : (\n        <div>\n          <p>\n            Title focused properly? {controlledTitleFocusedProperly.toString()}\n          </p>\n          <p>Breakpoint: {breakpoint}</p>\n          <ResponsiveElement\n            onChange={onChange}\n            responsiveTo=\"window\"\n            tiny={tiny}\n            large={large}\n          />\n        </div>\n      )}\n    </Base>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}